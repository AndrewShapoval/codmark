{"version":3,"sources":["n1_main/m1_ui/components/Header/Header.module.scss","n1_main/m1_ui/components/Main/Main.module.scss","n1_main/m3_dal/api.ts","n1_main/m2_bll/appReducer.ts","n1_main/m1_ui/components/common/Modal/Modal.tsx","n1_main/m1_ui/components/Main/Main.tsx","n1_main/m1_ui/components/Header/Header.tsx","n1_main/m1_ui/App.tsx","reportWebVitals.ts","n1_main/m2_bll/store.ts","index.tsx","n1_main/m1_ui/components/common/Modal/Modal.module.scss"],"names":["module","exports","instance","axios","create","baseURL","appAPI","tag","get","initialState","status","images","responseMessage","setAppStatusAC","type","setResponseMessageAC","message","Modal","active","setActive","text","className","styles","modal","onClick","modalContent","modalContentActive","e","stopPropagation","Main","dispatch","useDispatch","useSelector","state","app","appStatus","useState","modalActive","setModalActive","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","then","res","data","length","id","image_url","setImageAC","toLowerCase","catch","err","finally","mainBlock","mainContainer","handleSubmit","form","placeholder","onChange","handleChange","name","value","load","disabled","clear","resetForm","group","map","img","image","src","setFieldValue","alt","Header","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15f20c12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3MFKn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Main_mainBlock__5aICz\",\"mainContainer\":\"Main_mainContainer__KoDBs\",\"form\":\"Main_form__3hcEP\",\"load\":\"Main_load__2A8OV\",\"clear\":\"Main_clear__2PnN6\",\"group\":\"Main_group__3R4OT\",\"images\":\"Main_images__KzOY_\",\"image\":\"Main_image__3Nt_z\",\"img\":\"Main_img__ecFBd\"};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    // withCredentials: true,\r\n    baseURL: `https://api.giphy.com/v1/gifs/`,\r\n})\r\n\r\nconst API_KEY = \"gTJAO48YcpmrADUyo4opy4ES4g7iDBxx\"\r\n\r\nexport const appAPI  = {\r\n    getImage(tag: string) {\r\n        return instance.get(`random?api_key=${API_KEY}&tag=${tag}`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {appAPI} from \"../m3_dal/api\";\r\n\r\nconst initialState = {\r\n    status: \"idle\" as RequestStatusType,\r\n    images: [] as Array<ImageType>,\r\n    responseMessage: \"\"\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET_STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET_IMAGE\":\r\n            return {...state, images: [...state.images, {id: action.id, image_url: action.image_url, tag: action.tag}]}\r\n        case \"APP/REMOVE_IMAGE\":\r\n            return {...state, images: []}\r\n        case \"APP/SET_RESPONSE_MESSAGE\":\r\n            return {...state, responseMessage: action.message}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setImageAC = (id: string, image_url: string, tag: string) => ({type: \"APP/SET_IMAGE\", id, image_url, tag} as const)\r\nexport const removeImageAC = () => ({type: \"APP/REMOVE_IMAGE\"} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET_STATUS\", status} as const)\r\nexport const setResponseMessageAC = (message: string) => ({type: \"APP/SET_RESPONSE_MESSAGE\", message} as const)\r\n\r\nexport const getImageTC = (tag: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    appAPI.getImage(tag)\r\n        .then((res) => {\r\n            if (res.data.data.length !== 0) {\r\n                let {id, image_url} = res.data.data\r\n                dispatch(setImageAC(id, image_url, tag.toLowerCase()))\r\n            } else {\r\n                dispatch(setResponseMessageAC(\"По тегу ничего не найдено\"))\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            dispatch(setResponseMessageAC(\"Произошла http ошибка\"))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setAppStatusAC> |\r\n    ReturnType<typeof setImageAC> |\r\n    ReturnType<typeof removeImageAC> |\r\n    ReturnType<typeof setResponseMessageAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type ImageType = {\r\n    id: string\r\n    image_url: string\r\n    tag: string\r\n}","import React from \"react\";\r\nimport styles from \"./Modal.module.scss\"\r\n\r\nexport const Modal = ({active, setActive, text}: any) => {\r\n    return (\r\n        <div className={active ? `${styles.modal} ${styles.active}` : styles.modal}\r\n             onClick={() => setActive(false)}>\r\n            <div className={active ? `${styles.modalContent} ${styles.modalContentActive}` : styles.modalContent}\r\n                 onClick={(e) => e.stopPropagation()}>\r\n                <p className={styles.text}>{text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport styles from \"./Main.module.scss\"\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getImageTC, ImageType, removeImageAC, RequestStatusType} from \"../../../m2_bll/appReducer\";\r\nimport {AppRootStateType} from \"../../../m2_bll/store\";\r\nimport {Modal} from \"../common/Modal/Modal\";\r\n\r\nexport const Main = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const images = useSelector<AppRootStateType, Array<ImageType>>(state => state.app.images)\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const responseMessage = useSelector<AppRootStateType, string>(state => state.app.responseMessage)\r\n    const [modalActive, setModalActive] = useState(false)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            tag: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.tag) {\r\n                errors.tag = \"Заполните поле 'тег'\"\r\n            } else if (!/^[a-z,]+$/i.test(values.tag)) {\r\n                errors.tag = \"Разрешены только буквы латинского алфавита\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(getImageTC(values.tag))\r\n        }\r\n    })\r\n\r\n    //Обработчик onSubmit формика и активация модалки\r\n    const formikHandleSubmit = () => {\r\n        setModalActive(true)\r\n        formik.handleSubmit()\r\n    }\r\n\r\n    // Обработчик удаления изображений из стейта\r\n    const handlerRemoveImages = () => {\r\n        dispatch(removeImageAC())\r\n        formik.resetForm()\r\n    }\r\n\r\n    //Обработчик установки тега в инпут\r\n    const handlerSetTagValueInput = (tag: string) => {\r\n        formik.setFieldValue(\"tag\", tag)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.mainBlock}>\r\n            {responseMessage ? <Modal active={modalActive} setActive={setModalActive} text={responseMessage}/> : null}\r\n            <div className={styles.mainContainer}>\r\n                <form onSubmit={formik.handleSubmit} className={styles.form}>\r\n                    <input type=\"text\" placeholder=\"введите тег\"\r\n                           onChange={formik.handleChange} name={\"tag\"} value={formik.values.tag}/>\r\n                    {\r\n                        formik.errors.tag\r\n                            ? <Modal active={modalActive} setActive={setModalActive} text={formik.errors.tag}/>\r\n                            : null\r\n                    }\r\n                    <button className={styles.load} value={\"send\"} disabled={appStatus === \"loading\"}\r\n                            onClick={formikHandleSubmit} type={\"submit\"}>\r\n                        {appStatus === \"loading\" ? \"Загрузка...\" : \"Загрузить\"}\r\n                    </button>\r\n                    <button className={styles.clear} type={\"button\"} onClick={handlerRemoveImages}>Очистить</button>\r\n                    <button className={styles.group} type={\"button\"}>Группировать</button>\r\n                </form>\r\n                <div className={styles.images}>\r\n                    {images\r\n                        ? images.map(img =>\r\n                            <div key={img.id} className={styles.image}>\r\n                                <img className={styles.img} src={img.image_url}\r\n                                     onClick={() => handlerSetTagValueInput(img.tag)} alt={img.tag}/>\r\n                            </div>)\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    tag?: string\r\n}","import React from \"react\";\r\nimport styles from \"./Header.module.scss\"\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <h1>Header</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport styles from './App.module.scss';\nimport {Main} from \"./components/Main/Main\";\nimport {Header} from \"./components/Header/Header\";\n\nexport const App = () => {\n    return (\n        <div className={styles.app}>\n            <Header/>\n            <Main/>\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {appReducer} from \"./appReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './n1_main/m1_ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1_main/m2_bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1kS8s\",\"modalContent\":\"Modal_modalContent__2GV_h\",\"text\":\"Modal_text__2r-Su\",\"modalContentActive\":\"Modal_modalContentActive__3QTwg\",\"active\":\"Modal_active__IM28W\"};"],"sourceRoot":""}