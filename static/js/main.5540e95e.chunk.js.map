{"version":3,"sources":["n1_main/m1_ui/components/Main/GroupedTags/GroupedTags.module.scss","n1_main/m1_ui/components/Main/Image/Image.module.scss","n1_main/m1_ui/components/Header/Header.module.scss","n1_main/m1_ui/components/Main/Main.module.scss","n1_main/m3_dal/api.ts","n1_main/m2_bll/appReducer.ts","n1_main/m1_ui/components/common/Modal/Modal.tsx","n1_main/m1_ui/components/Main/Image/Image.tsx","n1_main/m1_ui/components/Main/GroupedTags/GroupedTags.tsx","n1_main/m1_ui/components/Main/Main.tsx","n1_main/m1_ui/components/Header/Header.tsx","n1_main/m1_ui/App.tsx","reportWebVitals.ts","n1_main/m2_bll/store.ts","index.tsx","n1_main/m1_ui/components/common/Modal/Modal.module.scss"],"names":["module","exports","instance","axios","create","baseURL","appAPI","tag","get","initialState","status","images","responseMessage","uniqueTagsNames","compositeImage","setAppStatusAC","type","setResponseMessageAC","message","setCompositeImageAC","imgI","imgB","Modal","active","setActive","text","className","styles","modal","onClick","modalContent","modalContentActive","e","stopPropagation","Image","React","memo","props","image","img","src","image_url","handlerSetTagValueInput","alt","GroupedTags","useSelector","state","app","map","uniqueTag","i","groupedTags","filter","index","id","Main","dispatch","useDispatch","appStatus","useState","modalActive","setModalActive","isGroup","setIsGroup","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","indexOf","then","res","data","length","setImageAC","toLowerCase","setUniqueTagNameAC","setTimeout","catch","finally","tags","split","a","Promise","all","getCompositeImageTC","setFieldValue","mainBlock","mainContainer","handleSubmit","form","placeholder","onChange","handleChange","name","value","load","disabled","clear","resetForm","group","compositeImageBlock","Header","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","find","t","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5540e95e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"groupedTags\":\"GroupedTags_groupedTags__mUxs_\",\"uniqueTag\":\"GroupedTags_uniqueTag__191ad\",\"images\":\"GroupedTags_images__3X1SC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"Image_image__15mkD\",\"img\":\"Image_img__1UAoH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3MFKn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Main_mainBlock__5aICz\",\"mainContainer\":\"Main_mainContainer__KoDBs\",\"form\":\"Main_form__3hcEP\",\"load\":\"Main_load__2A8OV\",\"clear\":\"Main_clear__2PnN6\",\"group\":\"Main_group__3R4OT\",\"compositeImageBlock\":\"Main_compositeImageBlock__3mL4g\",\"img\":\"Main_img__ecFBd\",\"images\":\"Main_images__KzOY_\"};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.giphy.com/v1/gifs/`,\r\n})\r\n\r\nconst API_KEY = \"gTJAO48YcpmrADUyo4opy4ES4g7iDBxx\"\r\n\r\nexport const appAPI = {\r\n    getImage(tag: string) {\r\n        return instance.get(`random?api_key=${API_KEY}&tag=${tag}`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {appAPI} from \"../m3_dal/api\";\r\n\r\nconst initialState = {\r\n    status: \"idle\" as RequestStatusType,\r\n    images: [] as Array<ImageType>,\r\n    responseMessage: \"\",\r\n    uniqueTagsNames: [] as Array<string>,\r\n    compositeImage: [] as Array<string>\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET_STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET_IMAGE\":\r\n            return {...state, images: [...state.images, {id: action.id, image_url: action.image_url, tag: action.tag}]}\r\n        case \"APP/REMOVE_IMAGE\":\r\n            return {...state, images: [], uniqueTagsNames: [], compositeImage: []}\r\n        case \"APP/SET_RESPONSE_MESSAGE\":\r\n            return {...state, responseMessage: action.message}\r\n        case \"APP/SET_UNIQUE_TAG_NAME\":\r\n            if (state.uniqueTagsNames.length) {\r\n                if (state.uniqueTagsNames.find(t => t === action.tag)) {\r\n                    return state\r\n                } else {\r\n                    return {...state, uniqueTagsNames: [...state.uniqueTagsNames, action.tag]}\r\n                }\r\n            }\r\n            return {...state, uniqueTagsNames: [action.tag]}\r\n        case \"APP/SET_COMPOSITE_IMAGE\":\r\n            return {...state, compositeImage: [action.imgI, action.imgB]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setImageAC = (id: string, image_url: string, tag: string) => ({type: \"APP/SET_IMAGE\", id, image_url, tag} as const)\r\nconst setUniqueTagNameAC = (tag: string) => ({type: \"APP/SET_UNIQUE_TAG_NAME\", tag} as const)\r\nexport const removeImageAC = () => ({type: \"APP/REMOVE_IMAGE\"} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET_STATUS\", status} as const)\r\nexport const setResponseMessageAC = (message: string) => ({type: \"APP/SET_RESPONSE_MESSAGE\", message} as const)\r\nexport const setCompositeImageAC = (imgI: string, imgB: string) => ({type: \"APP/SET_COMPOSITE_IMAGE\", imgI, imgB} as const)\r\n\r\nexport const getImageTC = (tag: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    appAPI.getImage(tag)\r\n        .then((res) => {\r\n            if (res.data.data.length !== 0) {\r\n                let {id, image_url} = res.data.data\r\n                dispatch(setImageAC(id, image_url, tag.toLowerCase()))\r\n                dispatch(setUniqueTagNameAC(tag.toLowerCase()))\r\n            } else {\r\n                dispatch(setResponseMessageAC(\"По тегу ничего не найдено\"))\r\n                setTimeout(() => dispatch(setResponseMessageAC(\"\")), 3000)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            dispatch(setResponseMessageAC(\"Произошла http ошибка\"))\r\n            setTimeout(() => dispatch(setResponseMessageAC(\"\")), 3000)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const getCompositeImageTC = (tags: Array<string>) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await Promise.all([appAPI.getImage(tags[0]), appAPI.getImage(tags[1])])\r\n        const imgI = res[0].data.data.image_url\r\n        const imgB = res[1].data.data.image_url\r\n        dispatch(setCompositeImageAC(imgI, imgB))\r\n    } catch (e) {\r\n        dispatch(setResponseMessageAC(\"Произошла http ошибка\"))\r\n    }\r\n    dispatch(setAppStatusAC('succeeded'))\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setAppStatusAC> |\r\n    ReturnType<typeof setImageAC> |\r\n    ReturnType<typeof removeImageAC> |\r\n    ReturnType<typeof setResponseMessageAC> |\r\n    ReturnType<typeof setUniqueTagNameAC> |\r\n    ReturnType<typeof setCompositeImageAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type ImageType = {\r\n    id: string\r\n    image_url: string\r\n    tag: string\r\n}","import React from \"react\";\r\nimport styles from \"./Modal.module.scss\"\r\n\r\nexport const Modal = ({active, setActive, text}: any) => {\r\n    return (\r\n        <div className={active ? `${styles.modal} ${styles.active}` : styles.modal}\r\n             onClick={() => setActive(false)}>\r\n            <div className={active ? `${styles.modalContent} ${styles.modalContentActive}` : styles.modalContent}\r\n                 onClick={(e) => e.stopPropagation()}>\r\n                <p className={styles.text}>{text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ImageType} from \"../../../../m2_bll/appReducer\";\r\nimport styles from \"./Image.module.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nexport const Image = React.memo((props: PropsType) => {\r\n    return (\r\n        <div className={styles.image}>\r\n            <img className={styles.img} src={props.image.image_url}\r\n                 onClick={() => props.handlerSetTagValueInput(props.image.tag)} alt={props.image.tag}/>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    handlerSetTagValueInput: (tag: string) => void\r\n    image: ImageType\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2_bll/store\";\r\nimport {ImageType} from \"../../../../m2_bll/appReducer\";\r\nimport styles from \"./GroupedTags.module.scss\";\r\nimport {Image} from \"../Image/Image\";\r\n\r\nexport const GroupedTags = React.memo((props: PropsType) => {\r\n\r\n    const uniqueTagsNames = useSelector<AppRootStateType, Array<string>>(state => state.app.uniqueTagsNames)\r\n    const images = useSelector<AppRootStateType, Array<ImageType>>(state => state.app.images)\r\n\r\n    return (\r\n        <>\r\n            {uniqueTagsNames\r\n            && uniqueTagsNames.map((uniqueTag, i) =>\r\n                <div className={styles.groupedTags} key={i}>\r\n                    <h3 className={styles.uniqueTag}>{uniqueTag}</h3>\r\n                    <div className={styles.images}>\r\n                        {images\r\n                        && images.filter(img => img.tag === uniqueTag)\r\n                            .map((img, index) =>\r\n                                <Image handlerSetTagValueInput={props.handlerSetTagValueInput} image={img}\r\n                                       key={`${img.id} ${index}`}/>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    handlerSetTagValueInput: (tag: string) => void\r\n}","import React, {useState} from \"react\";\r\nimport styles from \"./Main.module.scss\"\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCompositeImageTC, getImageTC, ImageType, removeImageAC, RequestStatusType} from \"../../../m2_bll/appReducer\";\r\nimport {AppRootStateType} from \"../../../m2_bll/store\";\r\nimport {Modal} from \"../common/Modal/Modal\";\r\nimport {GroupedTags} from \"./GroupedTags/GroupedTags\";\r\nimport {Image} from \"./Image/Image\";\r\n\r\nexport const Main = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const images = useSelector<AppRootStateType, Array<ImageType>>(state => state.app.images)\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const responseMessage = useSelector<AppRootStateType, string>(state => state.app.responseMessage)\r\n    const [modalActive, setModalActive] = useState(false)\r\n    const [isGroup, setIsGroup] = useState(false)\r\n    const compositeImage = useSelector<AppRootStateType, Array<string>>(state => state.app.compositeImage)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            tag: \"\"\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.tag) {\r\n                errors.tag = \"Заполните поле 'тег'\"\r\n            } else if (!/^[a-z, ]+$/i.test(values.tag)) {\r\n                errors.tag = \"Разрешены только буквы латинского алфавита\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            if (values.tag.indexOf(\",\") === -1) {\r\n                dispatch(getImageTC(values.tag))\r\n            } else {\r\n                let tags = values.tag.split(/\\s*,\\s*/)\r\n                dispatch(getCompositeImageTC(tags))\r\n                debugger\r\n            }\r\n\r\n        }\r\n    })\r\n\r\n    //Обработчик onSubmit формика и активация модалки\r\n    const formikHandleSubmit = () => {\r\n        if (formik.errors) {\r\n            setModalActive(true)\r\n        }\r\n        formik.handleSubmit()\r\n    }\r\n\r\n    // Обработчик удаления изображений из стейта\r\n    const handlerRemoveImages = () => {\r\n        dispatch(removeImageAC())\r\n        formik.resetForm()\r\n    }\r\n\r\n    //Обработчик установки тега в инпут\r\n    const handlerSetTagValueInput = (tag: string) => {\r\n        formik.setFieldValue(\"tag\", tag)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.mainBlock}>\r\n            {responseMessage ? <Modal active={modalActive} setActive={setModalActive} text={responseMessage}/> : null}\r\n            <div className={styles.mainContainer}>\r\n                <form onSubmit={formik.handleSubmit} className={styles.form}>\r\n                    <input type=\"text\" placeholder=\"введите тег\"\r\n                           onChange={formik.handleChange} name={\"tag\"} value={formik.values.tag}/>\r\n                    {\r\n                        formik.errors.tag\r\n                            ? <Modal active={modalActive} setActive={setModalActive} text={formik.errors.tag}/>\r\n                            : null\r\n                    }\r\n                    <button className={styles.load} value={\"send\"} disabled={appStatus === \"loading\"}\r\n                            onClick={formikHandleSubmit} type={\"submit\"}>\r\n                        {appStatus === \"loading\" ? \"Загрузка...\" : \"Загрузить\"}\r\n                    </button>\r\n                    <button className={styles.clear} type={\"button\"} onClick={handlerRemoveImages}>Очистить</button>\r\n                    {!isGroup\r\n                        ? <button className={styles.group} type={\"button\"}\r\n                                  onClick={() => setIsGroup(true)}>Группировать</button>\r\n                        : <button className={styles.group} type={\"button\"}\r\n                                  onClick={() => setIsGroup(false)}>Разгруппировать</button>}\r\n                </form>\r\n                {\r\n                    compositeImage.length > 0\r\n                        ? <div className={styles.compositeImageBlock}>\r\n                            {compositeImage.map((img, i) =>\r\n                                <div key={i} className={styles.compositeImage}>\r\n                                    <img src={img} className={styles.img}/>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        : null\r\n                }\r\n                {!isGroup\r\n                    ? <div className={styles.images}>\r\n                        {images && images.map((img, index) =>\r\n                            <Image handlerSetTagValueInput={handlerSetTagValueInput} image={img}\r\n                                   key={`${img.id} ${index}`}/>\r\n                        )}\r\n                    </div>\r\n                    : <GroupedTags handlerSetTagValueInput={handlerSetTagValueInput}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    tag?: string\r\n}","import React from \"react\";\r\nimport styles from \"./Header.module.scss\"\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <h1>Header</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport styles from './App.module.scss';\nimport {Main} from \"./components/Main/Main\";\nimport {Header} from \"./components/Header/Header\";\n\nexport const App = () => {\n    return (\n        <div className={styles.app}>\n            <Header/>\n            <Main/>\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {appReducer} from \"./appReducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './n1_main/m1_ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1_main/m2_bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1kS8s\",\"modalContent\":\"Modal_modalContent__2GV_h\",\"text\":\"Modal_text__2r-Su\",\"modalContentActive\":\"Modal_modalContentActive__3QTwg\",\"active\":\"Modal_active__IM28W\"};"],"sourceRoot":""}